# API'S begin with '_' by convention

# Cluster health
GET /_cluster/health

# List all nodes
GET /_cat/nodes?v

# List all shards
GET /_cat/shards?v

# List all indices
GET /_cat/indices?v

# Simple search query
GET _search
{
  "query": {
    "match_all": {}
  }
}

# Create an index
PUT /index1

# Create an index specifying shards
PUT /books
{
  "settings": {
    "number_of_replicas": 2,
    "number_of_shards": 2
  }
}

# Delete an index
DELETE /index1

# Index a document
PUT /books/_doc
{
  "title": "The new horizon",
  "author": "Nathon S",
  "sold": 985
}

# Index a doc specifying its id
PUT /books/_doc/23
{
  "title": "The Big Bang",
  "author": "Albert E",
  "sold": 658424
}

# Retrieve a document
GET /books/_doc/23

# Update a document
POST /books/_update/23
{
  "doc": {
    "sold": 658430 
  }
}

# Update by script
POST /books/_update/23
{
  "script": {
    "source" : "ctx._source.sold += params.limit",
    "params": {
      "limit": 50
    }
  }
}

# Update by query
POST /books/_update_by_query
{
  "script": {
    "source" : "ctx._source.sold++"
  },
  "query": {
    "match_all" : {}
  }
}

# Bulk processing
POST /_bulk
{ "index": {"_index": "books", "_id": 24} }
{ "title": "Before Big Bang", "author": "Mat E N", "sold": 3000 }
{ "update": {"_index": "books", "_id": 24} }
{ "doc" : {"sold": 3005 }}
{ "delete": { "_index": "books", "_id": 26}}

# Curl command for importing data
curl -H "Content-Type: application/x-ndjson" -X POST http://localhost:9200/products/_bulk --data-binary "@products-bulk.json"

# Analyzer
POST /_analyze
{
  "text": "We are just 4 light years away from our 2nd nearest star.. !!",
  "analyzer": "standard",
  "char_filter": []
}

# Since we are using keyword analyzer, the text is stored as is.
POST /_analyze
{
  "text": "We are just 4 light years away from our 2nd nearest star.. !!",
  "analyzer": "keyword"
}

# Coersion
POST /coersion/_doc/1
{
  "price": 2.1
}
# since the price will be saved as a float, 2.2 is converted to a float
POST /coersion/_doc/2
{
  "price": "2.2"
}
# This would fail as the price is a float and 2.2abc cannot be converted to float
POST /coersion/_doc/3
{
  "price": "2.2abc"
}
# price in the returned object would still be a string "2.2" as the _source key contains the original values that we indexed. And a search query is performed against the values stored in BKD tree(in case float here)
GET /coersion/_doc/2

# There are no arrays in elasticsearch. Below 2 queries will execute fine as all objects are arrays by default. In case of multiple objects, for a text field, they are concatinated and stored before tokenizing. All values should be of same type or should be coersible
POST /books/_doc
{
  "author": "Virat K"
}
POST /books/_doc
{
  "author": ["Rohit S", "Shikhar D"]
}

# Explicit Mapping
PUT /blogs
{
  "mappings": {
    "properties": {
      "title": { "type" : "text"},
      "author": {
        "properties": {
          "name": { "type" : "text" },
          "email": { "type" : "keyword" }
        }
      },
      "content": { "type" : "text" }
    }
  }
}

POST /blogs/_doc/1
{
  "title": "How to contact with aliens",
  "author": {
    "name": "Neil D Tyson",
    "email": "neildtyson@caltec.edu"
  },
  "context": "In 1989, ..."
}

#Retrieve mapping
GET /blogs/_mapping
GET /blogs/_mapping/field/author.email