# API'S begin with '_' by convention

# Cluster health
GET /_cluster/health

# List all nodes
GET /_cat/nodes?v

# List all shards
GET /_cat/shards?v

# List all indices
GET /_cat/indices?v

# Simple search query
GET _search
{
  "query": {
    "match_all": {}
  }
}

# Create an index
PUT /index1

# Create an index specifying shards
PUT /books
{
  "settings": {
    "number_of_replicas": 2,
    "number_of_shards": 2
  }
}

# Delete an index
DELETE /index1

# Index a document
PUT /books/_doc
{
  "title": "The new horizon",
  "author": "Nathon S",
  "sold": 985
}

# Index a doc specifying its id
PUT /books/_doc/23
{
  "title": "The Big Bang",
  "author": "Albert E",
  "sold": 658424
}

# Retrieve a document
GET /books/_doc/23

# Update a document
POST /books/_update/23
{
  "doc": {
    "sold": 658430 
  }
}

# Update by script
POST /books/_update/23
{
  "script": {
    "source" : "ctx._source.sold += params.limit",
    "params": {
      "limit": 50
    }
  }
}

# Update by query
POST /books/_update_by_query
{
  "script": {
    "source" : "ctx._source.sold++"
  },
  "query": {
    "match_all" : {}
  }
}

# Bulk processing
POST /_bulk
{ "index": {"_index": "books", "_id": 24} }
{ "title": "Before Big Bang", "author": "Mat E N", "sold": 3000 }
{ "update": {"_index": "books", "_id": 24} }
{ "doc" : {"sold": 3005 }}
{ "delete": { "_index": "books", "_id": 26}}

# Curl command for importing data
curl -H "Content-Type: application/x-ndjson" -X POST http://localhost:9200/products/_bulk --data-binary "@products-bulk.json"

# Analyzer
POST /_analyze
{
  "text": "We are just 4 light years away from our 2nd nearest star.. !!",
  "analyzer": "standard",
  "char_filter": []
}

# Since we are using keyword analyzer, the text is stored as is.
POST /_analyze
{
  "text": "We are just 4 light years away from our 2nd nearest star.. !!",
  "analyzer": "keyword"
}

# Coersion
POST /coersion/_doc/1
{
  "price": 2.1
}
# since the price will be saved as a float, 2.2 is converted to a float
POST /coersion/_doc/2
{
  "price": "2.2"
}
# This would fail as the price is a float and 2.2abc cannot be converted to float
POST /coersion/_doc/3
{
  "price": "2.2abc"
}
# price in the returned object would still be a string "2.2" as the _source key contains the original values that we indexed. And a search query is performed against the values stored in BKD tree(in case float here)
GET /coersion/_doc/2

# There are no arrays in elasticsearch. Below 2 queries will execute fine as all objects are arrays by default. In case of multiple objects, for a text field, they are concatinated and stored before tokenizing. All values should be of same type or should be coersible
POST /books/_doc
{
  "author": "Virat K"
}
POST /books/_doc
{
  "author": ["Rohit S", "Shikhar D"]
}

# Explicit Mapping
PUT /blogs
{
  "mappings": {
    "properties": {
      "title": { "type" : "text"},
      "author": {
        "properties": {
          "name": { "type" : "text" },
          "email": { "type" : "keyword" }
        }
      },
      "content": { "type" : "text" }
    }
  }
}

POST /blogs/_doc/1
{
  "title": "How to contact with aliens",
  "author": {
    "name": "Neil D Tyson",
    "email": "neildtyson@caltec.edu"
  },
  "context": "In 1989, ..."
}

#Retrieve mapping
GET /blogs/_mapping
GET /blogs/_mapping/field/author.email

# Explicit Mapping with dot notation
PUT /blogscopy
{
  "mappings": {
    "properties": {
      "title": { "type" : "text"},
      "author.name": { "type" : "text" },
      "author.email": { "type" : "keyword" },
      "content": { "type" : "text" }
    }
  }
}

# Add a field to an existing mapping
POST /blogs/_mapping
{
  "properties": {
    "created_at": { "type": "date" }
  }
}

# Dates by default should be in ISO 8601 format
# Sample allowed dates - i) 1905-03-14 ii) 1905-03-14T15:09:26Z iii) 1905-03-14T15:09:26+01:00 iv) 1596175852000 
# Note that all fields need not be passed. It doesn't store it as a null value either
POST /blogs/_doc/4
{
  "author.name": "Newton",
  "author.email": "doesntexist@nevermind.com",
  "title": "F=MA",
  "created_at": "5661942449000"
}

# format parameter - Used for specifying date format
# format properties - Defines nested object and nested field
# coerce - Enable/Disable coersion for a field
# doc_values - Enable/Disable use of inverted indices which are used for sorting/aggregation queries. This will save disk space
# norms - Enable/Disable normalization factors which are used for relevance scoring. this can save disk space at the expense of relevance scores
# index - Enable/Disable indexing a field. Disabled field cannot be used in search queries but can be used in aggregations.
# copy_to - copy more than one field to a new field and include the index of the new field. this new field will not be part of _source

# Add an alias
PUT /blogs/_mapping
{
  "properties": {
    "articlecontent": {
      "type": "alias",
      "path": "content"
    }
  }
}

# Index patterns - when we want multiple indices to use the same mapping
POST /_template/access-logs
{
  "index_patterns": ["access-logs*"],
  "settings": {
    "number_of_shards": 2,
    "index.mapping.coerce": false
  }, 
  "mappings": {
    "properties": {
      "ip": { "type": "text" },
      "timestamp": {"type": "date"},
      "logentry": { "type": "text" }
    }
  }
}
# Add an index with name starting with "access-log". If the newly specified index is created with a mapping while creation, the index template and its own mapping are merged while index template having lower priority.
PUT /access-logs-1905-03-14
GET /access-logs-1905-03-14

# In dynamic mapping, text fieds are by default mapped in two fields - one text field and one keyword field
POST /players/_doc
{
  "name": "Virat K"
}
GET /players

# If an index is created with explicit mapping, with setting dynamic mapping to false, ES still accepts a doc with fields which are not present in explicit mapping but these fields are not indexed.Setting dynamic to "strict" will reject the doc
PUT /players3
{
  "mappings": {
    "dynamic": "strict",
    "properties": {
      "name": {"type": "text"}
    }
  }
}
# This will still index the doc
POST /players3/_doc
{
  "name": "R Sharma",
  "email": "rsharma@cricismylife.com"
}

# Indices can be opened/closed. A static setting can be changed only when an index is closed
POST /players3/_close
POST /players3/_open

# Simple search queries
GET /products/_search?q=*
GET /products/_search
{
  "query": {
    "match": {
      "tags": "Meat"
    }
  }
}
# Term level queries perform exact matches on the inverted indices and full text queries go through the analyzers before searching.
GET /products/_search
{
  "query": {
    "term": {
      "tags": "Meat"
    }
  }
}
